/*
 * This file is generated by jOOQ.
 */
package cht.eric.models.tables;


import cht.eric.models.ChtNewcomerTraining;
import cht.eric.models.Keys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberPrivilege extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>cht_newcomer_training.member_privilege</code>
     */
    public static final MemberPrivilege MEMBER_PRIVILEGE = new MemberPrivilege();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>cht_newcomer_training.member_privilege.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>cht_newcomer_training.member_privilege.privilege_name</code>.
     */
    public final TableField<Record, String> PRIVILEGE_NAME = createField(DSL.name("privilege_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private MemberPrivilege(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private MemberPrivilege(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cht_newcomer_training.member_privilege</code>
     * table reference
     */
    public MemberPrivilege(String alias) {
        this(DSL.name(alias), MEMBER_PRIVILEGE);
    }

    /**
     * Create an aliased <code>cht_newcomer_training.member_privilege</code>
     * table reference
     */
    public MemberPrivilege(Name alias) {
        this(alias, MEMBER_PRIVILEGE);
    }

    /**
     * Create a <code>cht_newcomer_training.member_privilege</code> table
     * reference
     */
    public MemberPrivilege() {
        this(DSL.name("member_privilege"), null);
    }

    public <O extends Record> MemberPrivilege(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, MEMBER_PRIVILEGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ChtNewcomerTraining.CHT_NEWCOMER_TRAINING;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_MEMBER_PRIVILEGE_PRIMARY;
    }

    @Override
    public MemberPrivilege as(String alias) {
        return new MemberPrivilege(DSL.name(alias), this);
    }

    @Override
    public MemberPrivilege as(Name alias) {
        return new MemberPrivilege(alias, this);
    }

    @Override
    public MemberPrivilege as(Table<?> alias) {
        return new MemberPrivilege(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberPrivilege rename(String name) {
        return new MemberPrivilege(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberPrivilege rename(Name name) {
        return new MemberPrivilege(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberPrivilege rename(Table<?> name) {
        return new MemberPrivilege(name.getQualifiedName(), null);
    }
}
