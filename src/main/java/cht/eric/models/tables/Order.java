/*
 * This file is generated by jOOQ.
 */
package cht.eric.models.tables;


import cht.eric.models.ChtNewcomerTraining;
import cht.eric.models.Keys;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cht_newcomer_training.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>cht_newcomer_training.order.id</code>.
     */
    public final TableField<Record, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(14).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.order_date</code>.
     */
    public final TableField<Record, LocalDate> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.ship_date</code>.
     */
    public final TableField<Record, LocalDate> SHIP_DATE = createField(DSL.name("ship_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.customer_id_number</code>.
     */
    public final TableField<Record, String> CUSTOMER_ID_NUMBER = createField(DSL.name("customer_id_number"), SQLDataType.CHAR(8).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.customer_name</code>.
     */
    public final TableField<Record, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.country</code>.
     */
    public final TableField<Record, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.city</code>.
     */
    public final TableField<Record, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.state</code>.
     */
    public final TableField<Record, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.postal_code</code>.
     */
    public final TableField<Record, Integer> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.product_id_number</code>.
     */
    public final TableField<Record, String> PRODUCT_ID_NUMBER = createField(DSL.name("product_id_number"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.category</code>.
     */
    public final TableField<Record, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.sub_category</code>.
     */
    public final TableField<Record, String> SUB_CATEGORY = createField(DSL.name("sub_category"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.product_name</code>.
     */
    public final TableField<Record, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.sales</code>.
     */
    public final TableField<Record, Double> SALES = createField(DSL.name("sales"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.quantity</code>.
     */
    public final TableField<Record, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.discount</code>.
     */
    public final TableField<Record, Double> DISCOUNT = createField(DSL.name("discount"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.profit</code>.
     */
    public final TableField<Record, Double> PROFIT = createField(DSL.name("profit"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.is_returned</code>.
     */
    public final TableField<Record, Byte> IS_RETURNED = createField(DSL.name("is_returned"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.ship_mode</code>.
     */
    public final TableField<Record, String> SHIP_MODE = createField(DSL.name("ship_mode"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.region</code>.
     */
    public final TableField<Record, String> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.order.segment</code>.
     */
    public final TableField<Record, String> SEGMENT = createField(DSL.name("segment"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Order(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cht_newcomer_training.order</code> table
     * reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>cht_newcomer_training.order</code> table
     * reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>cht_newcomer_training.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ChtNewcomerTraining.CHT_NEWCOMER_TRAINING;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    @Override
    public Order as(Table<?> alias) {
        return new Order(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Table<?> name) {
        return new Order(name.getQualifiedName(), null);
    }
}
