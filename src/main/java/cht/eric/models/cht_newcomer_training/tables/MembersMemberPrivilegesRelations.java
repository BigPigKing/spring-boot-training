/*
 * This file is generated by jOOQ.
 */
package cht.eric.models.cht_newcomer_training.tables;


import cht.eric.models.cht_newcomer_training.ChtNewcomerTraining;
import cht.eric.models.cht_newcomer_training.Keys;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MembersMemberPrivilegesRelations extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>cht_newcomer_training.members_member_privileges_relations</code>
     */
    public static final MembersMemberPrivilegesRelations MEMBERS_MEMBER_PRIVILEGES_RELATIONS = new MembersMemberPrivilegesRelations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column
     * <code>cht_newcomer_training.members_member_privileges_relations.member_id</code>.
     */
    public final TableField<Record, Integer> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>cht_newcomer_training.members_member_privileges_relations.member_privilege_id</code>.
     */
    public final TableField<Record, Integer> MEMBER_PRIVILEGE_ID = createField(DSL.name("member_privilege_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private MembersMemberPrivilegesRelations(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private MembersMemberPrivilegesRelations(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased
     * <code>cht_newcomer_training.members_member_privileges_relations</code>
     * table reference
     */
    public MembersMemberPrivilegesRelations(String alias) {
        this(DSL.name(alias), MEMBERS_MEMBER_PRIVILEGES_RELATIONS);
    }

    /**
     * Create an aliased
     * <code>cht_newcomer_training.members_member_privileges_relations</code>
     * table reference
     */
    public MembersMemberPrivilegesRelations(Name alias) {
        this(alias, MEMBERS_MEMBER_PRIVILEGES_RELATIONS);
    }

    /**
     * Create a
     * <code>cht_newcomer_training.members_member_privileges_relations</code>
     * table reference
     */
    public MembersMemberPrivilegesRelations() {
        this(DSL.name("members_member_privileges_relations"), null);
    }

    public <O extends Record> MembersMemberPrivilegesRelations(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, MEMBERS_MEMBER_PRIVILEGES_RELATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ChtNewcomerTraining.CHT_NEWCOMER_TRAINING;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_MEMBERS_MEMBER_PRIVILEGES_RELATIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MEMBERS_MEMBER_PRIVILEGES_RELATIONS_MEMBERS, Keys.FK_MEMBERS_MEMBER_PRIVILEGES_RELATIONS_MEMBER_PRIVILEGES);
    }

    private transient Members _members;
    private transient MemberPrivileges _memberPrivileges;

    /**
     * Get the implicit join path to the
     * <code>cht_newcomer_training.members</code> table.
     */
    public Members members() {
        if (_members == null)
            _members = new Members(this, Keys.FK_MEMBERS_MEMBER_PRIVILEGES_RELATIONS_MEMBERS);

        return _members;
    }

    /**
     * Get the implicit join path to the
     * <code>cht_newcomer_training.member_privileges</code> table.
     */
    public MemberPrivileges memberPrivileges() {
        if (_memberPrivileges == null)
            _memberPrivileges = new MemberPrivileges(this, Keys.FK_MEMBERS_MEMBER_PRIVILEGES_RELATIONS_MEMBER_PRIVILEGES);

        return _memberPrivileges;
    }

    @Override
    public MembersMemberPrivilegesRelations as(String alias) {
        return new MembersMemberPrivilegesRelations(DSL.name(alias), this);
    }

    @Override
    public MembersMemberPrivilegesRelations as(Name alias) {
        return new MembersMemberPrivilegesRelations(alias, this);
    }

    @Override
    public MembersMemberPrivilegesRelations as(Table<?> alias) {
        return new MembersMemberPrivilegesRelations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MembersMemberPrivilegesRelations rename(String name) {
        return new MembersMemberPrivilegesRelations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MembersMemberPrivilegesRelations rename(Name name) {
        return new MembersMemberPrivilegesRelations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MembersMemberPrivilegesRelations rename(Table<?> name) {
        return new MembersMemberPrivilegesRelations(name.getQualifiedName(), null);
    }
}
