/*
 * This file is generated by jOOQ.
 */
package org.jooq.your.packagename.cht_newcomer_training.tables;


import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.your.packagename.cht_newcomer_training.ChtNewcomerTraining;
import org.jooq.your.packagename.cht_newcomer_training.Keys;
import org.jooq.your.packagename.cht_newcomer_training.enums.OrdersRegion;
import org.jooq.your.packagename.cht_newcomer_training.enums.OrdersSegment;
import org.jooq.your.packagename.cht_newcomer_training.enums.OrdersShipMode;
import org.jooq.your.packagename.cht_newcomer_training.tables.records.OrdersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>cht_newcomer_training.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>cht_newcomer_training.orders.id</code>.
     */
    public final TableField<OrdersRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(14).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.order_date</code>.
     */
    public final TableField<OrdersRecord, LocalDate> ORDER_DATE = createField(DSL.name("order_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.ship_date</code>.
     */
    public final TableField<OrdersRecord, LocalDate> SHIP_DATE = createField(DSL.name("ship_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.ship_mode</code>.
     */
    public final TableField<OrdersRecord, OrdersShipMode> SHIP_MODE = createField(DSL.name("ship_mode"), SQLDataType.VARCHAR(14).nullable(false).asEnumDataType(org.jooq.your.packagename.cht_newcomer_training.enums.OrdersShipMode.class), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.customer_id_number</code>.
     */
    public final TableField<OrdersRecord, String> CUSTOMER_ID_NUMBER = createField(DSL.name("customer_id_number"), SQLDataType.CHAR(8).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.customer_name</code>.
     */
    public final TableField<OrdersRecord, String> CUSTOMER_NAME = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.segment</code>.
     */
    public final TableField<OrdersRecord, OrdersSegment> SEGMENT = createField(DSL.name("segment"), SQLDataType.VARCHAR(11).nullable(false).asEnumDataType(org.jooq.your.packagename.cht_newcomer_training.enums.OrdersSegment.class), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.country</code>.
     */
    public final TableField<OrdersRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.city</code>.
     */
    public final TableField<OrdersRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.state</code>.
     */
    public final TableField<OrdersRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.postal_code</code>.
     */
    public final TableField<OrdersRecord, Integer> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.region</code>.
     */
    public final TableField<OrdersRecord, OrdersRegion> REGION = createField(DSL.name("region"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(org.jooq.your.packagename.cht_newcomer_training.enums.OrdersRegion.class), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.product_id_number</code>.
     */
    public final TableField<OrdersRecord, String> PRODUCT_ID_NUMBER = createField(DSL.name("product_id_number"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.category</code>.
     */
    public final TableField<OrdersRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.sub_category</code>.
     */
    public final TableField<OrdersRecord, String> SUB_CATEGORY = createField(DSL.name("sub_category"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.product_name</code>.
     */
    public final TableField<OrdersRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.VARCHAR(300).nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.sales</code>.
     */
    public final TableField<OrdersRecord, Double> SALES = createField(DSL.name("sales"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.quantity</code>.
     */
    public final TableField<OrdersRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.discount</code>.
     */
    public final TableField<OrdersRecord, Double> DISCOUNT = createField(DSL.name("discount"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.profit</code>.
     */
    public final TableField<OrdersRecord, Double> PROFIT = createField(DSL.name("profit"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>cht_newcomer_training.orders.is_returned</code>.
     */
    public final TableField<OrdersRecord, Byte> IS_RETURNED = createField(DSL.name("is_returned"), SQLDataType.TINYINT.nullable(false), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>cht_newcomer_training.orders</code> table
     * reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>cht_newcomer_training.orders</code> table
     * reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>cht_newcomer_training.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ChtNewcomerTraining.CHT_NEWCOMER_TRAINING;
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    @Override
    public Orders as(Table<?> alias) {
        return new Orders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Table<?> name) {
        return new Orders(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, LocalDate, LocalDate, OrdersShipMode, String, String, OrdersSegment, String, String, String, Integer, OrdersRegion, String, String, String, String, Double, Integer, Double, Double, Byte> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super LocalDate, ? super LocalDate, ? super OrdersShipMode, ? super String, ? super String, ? super OrdersSegment, ? super String, ? super String, ? super String, ? super Integer, ? super OrdersRegion, ? super String, ? super String, ? super String, ? super String, ? super Double, ? super Integer, ? super Double, ? super Double, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super LocalDate, ? super LocalDate, ? super OrdersShipMode, ? super String, ? super String, ? super OrdersSegment, ? super String, ? super String, ? super String, ? super Integer, ? super OrdersRegion, ? super String, ? super String, ? super String, ? super String, ? super Double, ? super Integer, ? super Double, ? super Double, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
