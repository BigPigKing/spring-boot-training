/*
 * This file is generated by jOOQ.
 */
package org.jooq.your.packagename.cht_newcomer_training.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.your.packagename.cht_newcomer_training.tables.MembersMemberPrivilegesRelations;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MembersMemberPrivilegesRelationsRecord extends UpdatableRecordImpl<MembersMemberPrivilegesRelationsRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>cht_newcomer_training.members_member_privileges_relations.member_id</code>.
     */
    public void setMemberId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>cht_newcomer_training.members_member_privileges_relations.member_id</code>.
     */
    public Integer getMemberId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>cht_newcomer_training.members_member_privileges_relations.member_privilege_id</code>.
     */
    public void setMemberPrivilegeId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>cht_newcomer_training.members_member_privileges_relations.member_privilege_id</code>.
     */
    public Integer getMemberPrivilegeId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return MembersMemberPrivilegesRelations.MEMBERS_MEMBER_PRIVILEGES_RELATIONS.MEMBER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return MembersMemberPrivilegesRelations.MEMBERS_MEMBER_PRIVILEGES_RELATIONS.MEMBER_PRIVILEGE_ID;
    }

    @Override
    public Integer component1() {
        return getMemberId();
    }

    @Override
    public Integer component2() {
        return getMemberPrivilegeId();
    }

    @Override
    public Integer value1() {
        return getMemberId();
    }

    @Override
    public Integer value2() {
        return getMemberPrivilegeId();
    }

    @Override
    public MembersMemberPrivilegesRelationsRecord value1(Integer value) {
        setMemberId(value);
        return this;
    }

    @Override
    public MembersMemberPrivilegesRelationsRecord value2(Integer value) {
        setMemberPrivilegeId(value);
        return this;
    }

    @Override
    public MembersMemberPrivilegesRelationsRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MembersMemberPrivilegesRelationsRecord
     */
    public MembersMemberPrivilegesRelationsRecord() {
        super(MembersMemberPrivilegesRelations.MEMBERS_MEMBER_PRIVILEGES_RELATIONS);
    }

    /**
     * Create a detached, initialised MembersMemberPrivilegesRelationsRecord
     */
    public MembersMemberPrivilegesRelationsRecord(Integer memberId, Integer memberPrivilegeId) {
        super(MembersMemberPrivilegesRelations.MEMBERS_MEMBER_PRIVILEGES_RELATIONS);

        setMemberId(memberId);
        setMemberPrivilegeId(memberPrivilegeId);
        resetChangedOnNotNull();
    }
}
